if require("nixCatsUtils").isNixCats then return end

local binary = {
  "tree-sitter",
  "ripgrep",
}
local lsps = {
  "jsonls",
  "prettierd",
  "lua_ls",
  "selene",
  "stylua",
  "nixd",
  "statix",
  "deadnix",
  "alejandra",
  "rust_analyzer",
  "clippy",
  "rustfmt",
  "taplo",
}

-- TODO: package(...)
local plugins = {
  "BirdeeHub/lze",
  "BirdeeHub/lzextras",
  "neovim/nvim-lspconfig",
  { "nvim-treesitter/nvim-treesitter", build = ":TSUpdate", opt = true },
  { "nvim-treesitter/nvim-treesitter-textobjects", opt = true },
  { "nvim-treesitter/nvim-treesitter-context", opt = true },
  { "RRethy/nvim-treesitter-endwise", opt = true },
  { "Saghen/blink.cmp", opt = true },
  { "saghen/blink.compat", opt = true },
  "b0o/schemastore.nvim",
  { "folke/trouble.nvim", opt = true },
  { "numToStr/Comment.nvim", opt = true },
  { "stevearc/conform.nvim", opt = true },
  { "mfussenegger/nvim-lint", opt = true },
  { "mfussenegger/nvim-dap", opt = true },
  { "rcarriga/nvim-dap-ui", opt = true },
  { "theHamsta/nvim-dap-virtual-text", opt = true },
  "LiadOz/nvim-dap-repl-highlights",
  { "stevearc/overseer.nvim", opt = true },
  { "folke/lazydev.nvim", opt = true },
  "NTBBloodbath/daylight.nvim",
  { "nvim-lualine/lualine.nvim", opt = true },
  { "folke/noice.nvim", opt = true },
  "MunifTanjim/nui.nvim",
  "rcarriga/nvim-notify",
  "folke/snacks.nvim",
  "folke/which-key.nvim",
  "catppuccin/nvim",
  "xiyaowong/transparent.nvim",
  "NTBBloodbath/sweetie.nvim",
  { "folke/neoconf.nvim", opt = true },
  "nvim-neotest/neotest",
  "nvim-neotest/nvim-nio",
  "nvim-lua/plenary.nvim",
  "echasnovski/mini.icons",
  { "L3MON4D3/LuaSnip", opt = true },
  "rafamadriz/friendly-snippets",
  { "max397574/better-escape.nvim", opt = true },
  { "nvim-neo-tree/neo-tree.nvim", opt = true },
  "nvim-tree/nvim-web-devicons",
  { "antosha417/nvim-lsp-file-operations", opt = true },
  { "dmmulroy/ts-error-translator.nvim", opt = true },
  "stevearc/oil.nvim",
  "benomahony/oil-git.nvim",
  "SirZenith/oil-vcs-status",
  "JezerM/oil-lsp-diagnostics.nvim",
  "refractalize/oil-git-status.nvim",
  "goolord/alpha-nvim",
  { "karb94/neoscroll.nvim", opt = true },
  { "mrjones2014/smart-splits.nvim", opt = true },
  { "ThePrimeagen/harpoon", branch = "harpoon2", opt = true },
  { "folke/flash.nvim", opt = true },
  { "smoka7/hop.nvim", opt = true },
  { "windwp/nvim-ts-autotag", opt = true },
  { "nguyenvukhang/nvim-toggler", opt = true },
  "abecodes/tabout.nvim",
  { "kylechui/nvim-surround", opt = true },
  { "NMAC427/guess-indent.nvim", opt = true },
  "JoosepAlviste/nvim-ts-context-commentstring",
  { "windwp/nvim-autopairs", opt = true },
  { "folke/todo-comments.nvim", opt = true },
  "kevinhwang91/promise-async",
  { "kevinhwang91/nvim-ufo", opt = true },
  "p00f/clangd_extensions.nvim",
  "Civitasv/cmake-tools.nvim",
  "yioneko/nvim-vtsls",
  { "jedrzejboczar/exrc.nvim", opt = true },
  { "NeogitOrg/neogit", opt = true },
  { "nvim-mini/mini.diff", opt = true },
  { "akinsho/git-conflict.nvim", opt = true },
  { "sindrets/diffview.nvim", opt = true },
  { "lewis6991/gitsigns.nvim", opt = true },
  { "ojroques/nvim-osc52", opt = true },
  { "github/copilot.vim", opt = true },
  { "olimorris/codecompanion.nvim", opt = true },
  { "luukvbaal/statuscol.nvim", opt = true },
}

if vim.version:ge "0.12" then
  -- TODO:
else
  require("nixCatsUtils.catPacker").setup(plugins)
end
